
# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="CHANGEME12345678-41ia99p5r3dklh56ml5f7kcre54p5nn5oa25j3mbfrqn2vu8t61"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

akka.log-config-on-start = on

akka {
  loglevel = WARNING
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }
}

spray.can {
  client {
    # The value of the `User-Agent` header to produce.
    # Set to the empty string to disable automatic rendering of the
    # `User-Agent` header.user-agent-header = spray-can/${spray.version}
    # TODO: replace this with a link to a page describing the webcrawler
    user-agent-header = spray-can/${spray.version}

    # How long to wait before giving up on a pending HTTP request (milliseconds)
    request-timeout = 20 s
   
   # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    idle-timeout = 10 s

    # If this setting is non-zero the HTTP client connections automatically
    # aggregate incoming response chunks into full HttpResponses before
    # dispatching them to the application.
    # If the size of the aggregated response surpasses the specified limit the
    # HTTP client connection is closed and an error returned.
    # Set to zero to disable automatic request chunk aggregation and have
    # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be
    # dispatched to the application.
    response-chunk-aggregation-limit = 512k
  }

  host-connector {
    # The maximum number of times an `HttpHostConnector` attempts to repeat
    # failed requests (if the request can be safely retried) before
    # giving up and returning an error.
    max-retries = 2

    # The maximum number of parallel connections that an `HttpHostConnector`
    # is allowed to establish to a host. Must be greater than zero.
    max-connections = 4
  }
}

crawler {
  # How deep to crawl before quitting. Since only links that match the same domain are
  # scheduled to be crawled for more links, a smallish number is acceptable here -- the goal is to
  # find dead links, not crawl every reachable URL.
  max-depth = 1000

  # How many milliseconds to wait in between crawling the same domain, including the
  # starting domain.
  default-crawl-delay = 1000 # 1 second

  # How many times to follow redirects when encountering a 3xx before giving up
  max-redirects = 5
}

atmos {
  trace {
    enabled = true # enable tracing
    node = AwesomeApplication # give this node a name

    traceable {
    "/user/someActor" = on # trace the someActor
    "/user/actors/*" = on # trace all actors in this subtree
    "*" = off # other actors are not traced
    }

    sampling {
      "/user/someActor" = 1 # sample every trace for someActor
      "/user/actors/*" = 100 # sample every 100th trace in this subtree
    }
  }
}